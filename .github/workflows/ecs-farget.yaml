name: Deploy Latest Docker Image to ECS

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Latest Image Digest
        id: get_image_digest
        run: |
          IMAGE_DIGEST=$(aws ecr describe-images --repository-name demo-app-ecr-repo --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageDigest' --output text)
          echo "image_digest=$IMAGE_DIGEST" >> $GITHUB_ENV

      - name: Get Current Task Definition
        id: get_task_def
        run: |
          TASK_DEF_ARN=$(aws ecs describe-services --cluster demo-app-cluster --services cc-demo-app-service --query "services[0].taskDefinition" --output text)
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Register New Task Definition
        id: register_task_def
        run: |
          CURRENT_TASK_DEF=$(aws ecs describe-task-definition --task-definition ${{ env.task_def_arn }} --query "taskDefinition")
          NEW_TASK_DEF=$(echo $CURRENT_TASK_DEF | jq --arg IMAGE "${{ steps.login-ecr.outputs.registry }}/demo-app-ecr-repo@${{ env.image_digest }}" '.containerDefinitions[0].image = $IMAGE | del(.revision, .status, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredBy, .registeredAt)')
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "new_task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster demo-app-cluster --service cc-demo-app-service --force-new-deployment --task-definition ${{ env.new_task_def_arn }}
